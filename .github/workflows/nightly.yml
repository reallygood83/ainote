name: Nightly Build

permissions:
  id-token: write
  contents: write

on:
  # schedule:
  #  # every weekday at 20:03 UTC / 21:03 CET
  #  # 20:03 because if you github runners will be more congested at the exact hours
  # - cron: '3 20 * * 1-5'
  workflow_dispatch:

jobs:
  latest-nightly-version:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.latest-nightly-version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Get latest nightly version
        id: latest-nightly-version
        run: |
          git fetch --prune --unshallow --tags
          echo "version=$(git tag -l | grep nightly | grep -v pre | sort -rV | head -n 1)" >> "$GITHUB_OUTPUT"

  next-nightly-version:
    needs: latest-nightly-version
    runs-on: ubuntu-22.04

    outputs:
      version: ${{ steps.next-nightly-version.outputs.version }}

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22.20.0

      - run: npm install semver

      - name: Set nightly version
        id: next-nightly-version
        uses: actions/github-script@v7
        env:
          LATEST_NIGHTLY_VERSION: ${{ needs.latest-nightly-version.outputs.version }}
        with:
          script: |
            const semver = require('semver');

            let nextNightlyVersion;

            try {
              const release = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const latestStableVersion = release.data.tag_name;
              nextNightlyVersion = semver.inc(latestStableVersion, 'prerelease', 'nightly');
            } catch (error) {
              if (error.status === 404) {
                nextNightlyVersion = '0.0.1-nightly.0';
                console.log('No stable release found.');
              } else {
                throw error;
              }
            }

            const latestNightlyVersion = process.env.LATEST_NIGHTLY_VERSION;
            if (semver.valid(latestNightlyVersion)) {
              const candidate = semver.inc(latestNightlyVersion, 'prerelease', 'nightly');
              nextNightlyVersion = semver.gt(candidate, nextNightlyVersion) ? candidate : nextNightlyVersion;
            }

            console.log(`Next nightly version: ${nextNightlyVersion}`);
            core.setOutput('version', nextNightlyVersion);

  build:
    needs: next-nightly-version
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.20.0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-about
        run: cargo install cargo-about

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ matrix.architecture }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.architecture }}-node-

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            packages/backend
            packages/backend-server
            ~/.cargo/bin/cargo-about
          key: ${{ runner.os }}-${{ matrix.architecture }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Turbo
        uses: actions/cache@v3
        with:
          path: |
            .turbo
            node_modules/.cache/turbo
          key: ${{ runner.os }}-${{ matrix.architecture }}-turbo-${{ hashFiles('**/package.json', '**/yarn.lock', 'turbo.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.architecture }}-turbo-

      - name: Install dependencies
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile --network-timeout 300000

      - name: build for ${{ matrix.os }}
        run: yarn build:desktop:${{ matrix.os == 'macos-latest' && 'mac:arm' || 'win:x64' }}
        env:
          APP_VERSION: ${{ needs.next-nightly-version.outputs.version }}
          M_VITE_APP_VERSION: ${{ needs.next-nightly-version.outputs.version }}
          P_VITE_APP_VERSION: ${{ needs.next-nightly-version.outputs.version }}
          R_VITE_APP_VERSION: ${{ needs.next-nightly-version.outputs.version }}

          HUSKY: 0
          NODE_OPTIONS: --max_old_space_size=8192
          SHOULD_NOTARIZE: 'true'

          PRODUCT_NAME: 'Surf'
          M_VITE_PRODUCT_NAME: 'Surf'
          BUILD_RESOURCES_DIR: build/resources/nightly

          R_VITE_MAIN_ONBOARDING_VIDEO_URL: ${{ secrets.MAIN_ONBOARDING_VIDEO_URL }}/${{ needs.next-nightly-version.outputs.version }}

      - uses: actions/upload-artifact@v4
        with:
          name: nightly-build-${{ matrix.os }}
          path: |
            app/dist/*.dmg
            app/dist/*.exe
            app/dist/*.AppImage
            app/dist/*.tar.gz
            app/dist/surf-*.yml

  create-release:
    needs: [next-nightly-version, build]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: build/
      - name: create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: true
          tag_name: ${{ needs.next-nightly-version.outputs.version }}
          files: |
            build/**/*.dmg
            build/**/*.exe
            build/**/*.AppImage
            build/**/*.tar.gz
            build/**/surf-*.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
